using System;

namespace WindowsApplication2
{
	/// <summary>
	/// Zusammenfassung für CardSimples.
	/// </summary>
	public class CardSimples
	{

		// IRDETO CRYPT-TABLE (TABLE 1 OF 2) FOR KEY-OPERATIONS ...
		private byte[] CryptTable1 = 
		{
			0xDA,0x26,0xE8,0x72,0x11,0x52,0x3E,0x46,0x32,0xFF,0x8C,0x1E,0xA7,0xBE,0x2C,0x29,
			0x5F,0x86,0x7E,0x75,0x0A,0x08,0xA5,0x21,0x61,0xFB,0x7A,0x58,0x60,0xF7,0x81,0x4F,
			0xE4,0xFC,0xDF,0xB1,0xBB,0x6A,0x02,0xB3,0x0B,0x6E,0x5D,0x5C,0xD5,0xCF,0xCA,0x2A,
			0x14,0xB7,0x90,0xF3,0xD9,0x37,0x3A,0x59,0x44,0x69,0xC9,0x78,0x30,0x16,0x39,0x9A,
			0x0D,0x05,0x1F,0x8B,0x5E,0xEE,0x1B,0xC4,0x76,0x43,0xBD,0xEB,0x42,0xEF,0xF9,0xD0,
			0x4D,0xE3,0xF4,0x57,0x56,0xA3,0x0F,0xA6,0x50,0xFD,0xDE,0xD2,0x80,0x4C,0xD3,0xCB,
			0xF8,0x49,0x8F,0x22,0x71,0x84,0x33,0xE0,0x47,0xC2,0x93,0xBC,0x7C,0x3B,0x9C,0x7D,
			0xEC,0xC3,0xF1,0x89,0xCE,0x98,0xA2,0xE1,0xC1,0xF2,0x27,0x12,0x01,0xEA,0xE5,0x9B,
			0x25,0x87,0x96,0x7B,0x34,0x45,0xAD,0xD1,0xB5,0xDB,0x83,0x55,0xB0,0x9E,0x19,0xD7,
			0x17,0xC6,0x35,0xD8,0xF0,0xAE,0xD4,0x2B,0x1D,0xA0,0x99,0x8A,0x15,0x00,0xAF,0x2D,
			0x09,0xA8,0xF5,0x6C,0xA1,0x63,0x67,0x51,0x3C,0xB2,0xC0,0xED,0x94,0x03,0x6F,0xBA,
			0x3F,0x4E,0x62,0x92,0x85,0xDD,0xAB,0xFE,0x10,0x2E,0x68,0x65,0xE7,0x04,0xF6,0x0C,
			0x20,0x1C,0xA9,0x53,0x40,0x77,0x2F,0xA4,0xFA,0x6D,0x73,0x28,0xE2,0xCD,0x79,0xC8,
			0x97,0x66,0x8E,0x82,0x74,0x06,0xC7,0x88,0x1A,0x4A,0x6B,0xCC,0x41,0xE9,0x9D,0xB8,
			0x23,0x9F,0x3D,0xBF,0x8D,0x95,0xC5,0x13,0xB9,0x24,0x5A,0xDC,0x64,0x18,0x38,0x91,
			0x7F,0x5B,0x70,0x54,0x07,0xB6,0x4B,0x0E,0x36,0xAC,0x31,0xE6,0xD6,0x48,0xAA,0xB4
		};


		public CardSimples()
		{
			;
		}

		static void XRotateLeft8Byte(byte[] buffer)
		{
			int k;
			byte t1 = buffer[7] ;  
			byte t2 = 0;
			int temp1, temp2, temp3;
			
			
			for (k=0;k<=7;k++) 
			{
				t2 = t1;	  
				t1 = buffer[k];
				temp1 = (buffer[k] << 1);
				temp2 = (t2 >> 7);
				temp3 = temp1 | temp2;
				buffer[k] = (byte)temp3;
				//buffer[k] = ( buffer[k]<< 1 ) | ( t2 >> 7 ) ; // OR
			}
		}


		public void ReverseSessionKeyCrypt(byte[] camkey, byte[] key)
		{
			byte[] localkey = new byte[8];
			byte tmp1;
			byte tmp2;
			int idx1,idx2;

			Array.Copy(camkey,0,localkey,0,8);
			//memcpy (localkey, camkey, 8) ; not implemented in C# (fuck ms)
			for (idx1=0;idx1<8;idx1++ ) 
			{
				for ( idx2=0;idx2<8;idx2++ ) 
				{
					tmp1 = CryptTable1[key[7] ^ localkey[idx2] ^ idx1] ;
					tmp2 = key[0] ;
					key[0] = key[1] ;
					key[1] = key[2] ;
					key[2] = key[3] ;
					key[3] = key[4] ;
					key[4] = key[5] ;

					//temp1 = key[6];
					//temp2 = tmp1;
					//temp3 = temp1 ^ temp2;
					//key[5] = (byte)temp3;
					//key[5] = key[6] ^ tmp1 ; // XOR
					key[5] = (byte)((int)key[6] ^tmp1);

					key[6] = key[7] ;
					
					//temp1 = key[7];
					//temp2 = tmp2;
					//temp3 = temp1 ^ temp2;
					//key[7] = (byte)temp3;
					//key[7] = tmp1 ^ tmp2 ; // XOR
					key[7] = (byte)((int)tmp1 ^ tmp2);
				}
				XRotateLeft8Byte(localkey);
			} 
		}


		public byte XorSum(byte[] mem, int len) 
		{
			byte cs=0;
			int i = 0;
			byte start = 0x3F;
			while(len>0) 
			{ 
				cs ^= mem[i]; len--; i++; 
			}
			/* 0x3F ist Startwert beim Irdeto-System */
			int a = cs ^ start;
			cs = (byte)a;

			return cs;
		}

		
	}
}
